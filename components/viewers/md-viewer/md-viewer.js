import './md-code.js';

ODA({ is: 'oda-md-viewer', template: `
        <style>
            :host { overflow-y: auto; line-height: 1.67;}
            table { border-collapse: collapse; width: 100%; margin-bottom: 16px;}
            th { @apply --header; border: 1px solid darkgray; padding: 2px; }
            td { border: 1px solid lightgray; padding: 2px; }
            img { max-width: 96%; height: auto; }
            blockquote { border-left: 2px solid lightgray; padding-left: 16px; }
            code { background-color: #f8f8f8; border: 1px solid #dfdfdf; color: #333; font-family: Consolas,"Liberation Mono",Courier,monospace; font-weight: normal; padding: 0.125rem 0.3125rem 0.0625rem;}
        </style>
        <div ~html="html" ~style="{padding}"></div>
        <oda-md-code style="display: none"></oda-md-code>
    `,
    set srcmd(n) {
        this._setHTML(n);
    },
    set src(n) {
        if (!this.srcmd) this._setHTML(n);
    },
    set editMode(n) {
        this._setHTML(this.srcmd || this.src);
    },
    html: '',
    options: {},
    defaultOptions: {
        omitExtraWLInCodeBlocks: false, //'Omit the default extra whiteline added to code blocks',
        noHeaderId: false, //'Turn on/off generated header id',
        prefixHeaderId: false, //'Add a prefix to the generated header ids. Passing a string will prefix that string to the header id. Setting to true will add a generic \'section-\' prefix',
        rawPrefixHeaderId: false, //'Setting this option to true will prevent showdown from modifying the prefix. This might result in malformed IDs (if, for instance, the " char is used in the prefix)',
        ghCompatibleHeaderId: false, //'Generate header ids compatible with github style (spaces are replaced with dashes, a bunch of non alphanumeric chars are removed)',
        rawHeaderId: false, //'Remove only spaces, \' and " from generated header ids (including prefixes), replacing them with dashes (-). WARNING: This might result in malformed ids',
        headerLevelStart: false, //'The header blocks level start', type: 'integer'
        parseImgDimensions: false, //'Turn on/off image dimension parsing',
        simplifiedAutoLink: false, //'Turn on/off GFM autolink style',
        literalMidWordUnderscores: false, //'Parse midword underscores as literal underscores',
        literalMidWordAsterisks: false, //'Parse midword asterisks as literal asterisks',
        strikethrough: false, //'Turn on/off strikethrough support',
        tables: true, //'Turn on/off tables support',
        tablesHeaderId: false, //'Add an id to table headers',
        ghCodeBlocks: true, //'Turn on/off GFM fenced code blocks support',
        tasklists: false, //'Turn on/off GFM tasklist support',
        smoothLivePreview: false, //'Prevents weird effects in live previews due to incomplete input',
        smartIndentationFix: false, //'Tries to smartly fix indentation in es6 strings',
        disableForced4SpacesIndentedSublists: true, //'Disables the requirement of indenting nested sublists by 4 spaces',
        simpleLineBreaks: false, //'Parses simple line breaks as <br> (GFM Style)',
        requireSpaceBeforeHeadingText: false, //'Makes adding a space between `#` and the header text mandatory (GFM Style)',
        ghMentions: false, //'Enables github @mentions',
        ghMentionsLink: 'https://github.com/{u}', //'Changes the link generated by @mentions. Only applies if ghMentions option is enabled.',
        encodeEmails: true, //'Encode e-mail addresses through the use of Character Entities, transforming ASCII e-mail addresses into its equivalent decimal entities',
        openLinksInNewWindow: true,//'Open all links in new windows',
        backslashEscapesHTMLTags: true, //'Support for HTML Tag escaping. ex: \<div>foo\</div>',
        emoji: true, //'Enable emoji support. Ex: `this is a :smile: emoji`'
        underline: true, //'Enable support for underline. Syntax is double or triple underscores: `__underline word__`. With this option enabled, underscores no longer parses into `<em>` and `<strong>`',
        completeHTMLDocument: false, //Outputs a complete html document, including `<html>`, `<head>` and `<body>` tags',
        metadata: false, //'Enable support for document metadata (defined at the top of the document between `«««` and `»»»` or between `---` and `---`).',
        splitAdjacentBlockquotes: false, //'Split adjacent blockquote blocks',
    },
    padding: '2px 10px;',
    async _import() {
        if (!globalThis.mdShowdown)
            for (let s of ['./dist/showdown.min.js', './dist/decodeHTML.min.js', './dist/highlight.min.js', './dist/showdown-youtube.min.js']) { await import(s); }
        // this._hasImports = true;
        globalThis.mdShowdown = new showdown.Converter({
            ...this.defaultOptions, ...this.options,
            extensions: ['youtube', (editMode = this.editMode) => {
                return [{
                    type: "output",
                    filter(text) {
                        let left = "<pre><code\\b[^>]*>", right = "</code></pre>", flags = "g";
                        const replacement = (wholeMatch, match, left) => {
                            let lang = (left.match(/class=\"([^ \"]+)/) || [])[1];
                            let html = lang && hljs.getLanguage(lang) ? hljs.highlight(lang, htmlDecode(match)).value : hljs.highlightAuto(htmlDecode(match)).value;
                            let pre = editMode ? html : 'undefined';
                            let encode = htmlEncode(match);
                            return `<oda-md-code code="${encode}" lang="${lang}" pre="${pre}"></oda-md-code>`;
                        };
                        return showdown.helper.replaceRecursiveRegExp(text, replacement, left, right, flags);
                    }
                }];
            }]
        });
    },
    attached() {
        this.async(() => {
            if (!this.src && !this.srcmd) {
                let url = new URL(window.location);
                let s = url.searchParams.get("s");
                this._setHTML(s);
            }
        });
    },
    async _setHTML(s) {
        if (s) {
            await this._import();
            let src = s;
            if (!this.srcmd && (s.endsWith('.md') || !(s.includes('~~~') || s.includes('```')))) {
                src = await fetch(s);
                src = src && src.ok ? await src.text() : s;
            }
            this.source = src;
            src = src.replace('~~~~~_~~~~~', '');
            src = src.replace(/(```\S*|~~~\S*)( +)/g, '$1' + '_');
            this.html = globalThis.mdShowdown.makeHtml(src);
        }
    }
})
