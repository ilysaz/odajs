ODA({is: 'oda-calculator', imports: '@oda/button',
    template: /*html*/ `
        <style>
            :host {
                @apply --vertical;
                max-width: 300px;
            }
            input {
                margin-left: 10px;
            }
            .header {
                @apply --header
            }
        </style>

        <div class="border" style="margin: 8px; text-align: right">
            <span style="font-size: small" class="dimmed">{{value}}</span>
            <div style="font-size: large">{{expression}}</div>
        </div>
        <div ~for="model?.rows" class="horizontal between">
            <oda-button ~for="btn in item" :label="btn.label" @tap="add(btn)" ~props="btn.props"></oda-button>
        </div>
    `,

    hostAttributes: {
        tabindex: 1
    },
    keyBindings: {
        p () {
            alert('HI')
        }
    },
    signs: ['+', '-', '*', '/'],
    value: '0',
    expression: '0',
    hideExpression: '0',
    model: {
        rows: [
            [
                {label: 'C', props:{class: "content"}, exec () {
                        this.hideExpression = '0';
                        this.expression = '0';
                        this.value = 0;
                    }
                },
                {label: '%', exec (e) {
                        this.calcPercent (e.label)
                    }
                }, 
                {label: 'ü†î', exec () {
                        this.deleteElement();
                    }
                }
            ],
            [  
                {label: 1},
                {label: 2}, 
                {label: 3},
                {label: '*'} 
            ],
            [
                {label: 4}, 
                {label: 5},
                {label: 6},
                {label: '/'} 
            ],
            [
                {label: 7},
                {label: 8}, 
                {label: 9},
                {label: '-'}  
            ], 
            [
                {label: 0},
                {label: '.', exec () {
                    this.getFraction()
                }},
                {label: '=', props: {class: "header"}, exec () {
                        this.calc();
                    }
                },
                {label: '+'} 
            ]
        ]
    },
    //–ó–∞–ø–∏—Å—å –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É, –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    add (btn) {
        if (this.signs.some((e) => e === btn.label)) {
            return this.stringValidation(btn.label)
        } 
        if (this.expression == '0' && btn.label !== '.' && btn.label !== '%') {
            this.getString().replace(/^0+(?!\.)/gm, '0') // —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –Ω—É–ª–∏ –≤–Ω–∞—á–∞–ª–µ —á–∏—Å–ª–∞
            this.expression = '';
            this.hideExpression = '';
        } else if (this.getString()[this.expression.length - 1] === '%' && /\d/.test(btn.label)) {
            this.expression = this.getString() + '*'; 
            this.hideExpression = this.hideExpression + '*'; 
        }
        // btn.exec ? btn.exec.call(this, btn) : this.expression = this.getString() + btn.label;
        if (btn.exec) {
            btn.exec.call(this, btn)
        } else {
            this.hideExpression = this.hideExpression + btn.label;
            this.expression = this.getString() + btn.label;
        } 
    },
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –≤ —Å—Ç—Ä–æ–∫–µ, –∞ —Ç–∞–∫ –∂–µ –∑–∞–ø–∏—Å—å –µ–≥–æ –≤ value –∏ expression
    calc () {
        console.log(this.hideExpression)
        if (this.expression) {
            if (this.getString().search(/\D$/) !== -1 && this.getString().match(/\D$/)[0] !== '%') {
                this.deleteElement();
            } 
            this.value = (new Function([], `with (this) {return ${this.hideExpression}}`)).call(this);
            const result = this.expression;
            this.expression = this.value;
            this.value = result + '=';
        } else {
            this.expression = '0';
            this.hideExpression = '0';
        }
    },
    // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ
    deleteElement () {
        if (this.expression === '' || this.getString().length === 1) { // –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è –∏–ª–∏ –≤ –Ω–µ–π –≤—Å–µ–≥–æ 1 —Å–∏–º–≤–æ–ª, —Å—Ç—Ä–æ–∫–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ 0
            this.expression = '0';
        } else {
            this.hideExpression = this.hideExpression.replace(/.$/, '');
            this.expression = this.getString().replace(/.$/, '');
        }
    },
    // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö —á–∏—Å–µ–ª
    getFraction () {
        const arr = this.getString().match(/(\d*)?\.?(\d*)?/g) // –ø–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        if (arr[(arr.length - 2)].match(/\./) || this.getString().match(/\D$/)) { // –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ç –ª–∏ –ø–µ—Ä–µ–¥ —Ç–æ—á–∫–æ–π –≤ —á–∏—Å–ª–µ –µ—â–µ –æ–¥–Ω–æ–π —Ç–æ—á–∫–∏, –ª–∏–±–æ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–Ω–∞–∫–∞
            return
        }
        this.expression += '.';
        this.hideExpression += '.';
    },
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞–∫–æ–≤ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏
    stringValidation (btn) {
        if (this.expression === '0') { // –∏—Å–∫–ª—é—á–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞–∫–æ–≤ –≤ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–µ
            return
        } else if (this.signs.some((e) => e === this.getString()[this.expression.length - 1]) || this.getString()[this.expression.length - 1] === '.') { // –∏—Å–∫–ª—é—á–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ–¥—Ä—è–¥
            this.hideExpression = this.hideExpression.replace(/.$/, btn);
            return this.expression = this.getString().replace(/.$/, btn);
        }
            this.hideExpression = this.hideExpression + btn;
            return this.expression = this.getString() + btn
    },
    //  –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
    calcPercent (btn = '') {
        this.stringValidation (btn);
        const arr = this.hideExpression.match(/(\d*)?\.?\d*/g).filter(Boolean); // –≤—ã–ø–∏—Å—ã–≤–∞–µ–º –≤ –º–∞—Å—Å–∏–≤ –≤—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —á–∏—Å–ª–∞
        arr[arr.length - 1] *= 0.01;
        this.hideExpression = this.hideExpression.replace(/\d*\.?(\d*)?\D$/, arr[arr.length - 1]) // —Å—Ä–∞–∑—É –≤—ã—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —á–∏—Å–ª–∞
    },
    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    getString () {
        return this.expression.toString()
    }
})