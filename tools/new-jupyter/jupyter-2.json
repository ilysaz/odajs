{
	"readOnly": false,
	"cells": [
		{
			"cell_type": "html",
			"source": "<b style=\"color:blue\">I'm an HTML cell...</b>",
			"args": ""
		},
		{
			"cell_type": "code",
			"source": "<b style=\"color:green\">I'm an Code cell...</b>\r\n\r\n<b style=\"color:red\">0123456789</b>\r\n\r\n",
			"args": "{\"args-ace\":{\"theme\":\"dracula\",\"showGutter\":true,\"showFoldWidgets\":true,\"showLineNumbers\":true}}",
			"cell_h": 165
		},
		{
			"cell_type": "markdown",
			"source": "<b style=\"color:red\">I'm an Markdown cell:</b>\n\rДиректива **~style** используется для реактивной стилизации любого HTML-элемента, объявленного внутри компонента. \r\n\r\nЗначение директивы **~style** автоматически связывается со значение атрибута **style** любого HTML-элемента, задавая стиль его отображения.\r\n\r\n### Пример 1.\r\n\r\n```javascript _run_edit_[my-component.js]_h=40_\r\nODA({\r\n    is: 'my-component',\r\n    template: `\r\n        <div ~style=\"myStyle\" @tap=\"_changeStyle\">Щелкни по мне</div>\r\n    `,\r\n    props: {\r\n        myStyle: \"background: green; color: yellow; padding: 10px\"\r\n    },\r\n    _changeStyle() {\r\n        let myStyle1 = \"background: green; color: yellow; padding: 10px\";\r\n        let myStyle2 = \"background: yellow; color: green; padding: 10px\";\r\n        this.myStyle = this.myStyle === myStyle1 ? myStyle2 : myStyle1;\r\n    }\r\n});\r\n```\r\n\r\nЗдесь при щелчке изменяется значение свойства компонента **myStyle**, что приводит к автоматическому изменению стиля отображения HTML-элемента **div**, в котором была указана эта директива **~style**.\r\n\r\nЗначение директивы **~style** можно задать не только в виде свойства компонента, но в виде обычной строки.\r\n\r\n",
			"fount": "",
			"args": ""
		},
		{
			"cell_type": "code",
			"source": "const path = import.meta.url.split('/').slice(0, -1).join('/');\r\nODA({\r\n    is: 'oda-jupyter', imports: '@oda/button, @tools/property-grid, @tools/containers',\r\n    template: `\r\n        <style>\r\n            :host{\r\n                @apply --vertical;\r\n                @apply --flex;\r\n            }\r\n        </style>\r\n        <oda-jupyter-divider ~if=\"!readOnly\" index=\"-1\"></oda-jupyter-divider>\r\n        <div ~for=\"(cell, index) in notebook?.cells\" class=\"vertical no-flex\">\r\n            <oda-jupyter-cell :cell :focused=\"focusedIndex === index\" @tap.stop=\"focusedIndex = (readOnly ? -1 : index)\"></oda-jupyter-cell>\r\n            <oda-jupyter-divider ~if=\"!readOnly\" :index></oda-jupyter-divider>\r\n        </div>\r\n    `,\r\n    listeners: {\r\n        tap(e) {\r\n            this.focusedIndex = -1;\r\n        }\r\n    },\r\n    props: {\r\n        iconSize: 16,\r\n        readOnly: {\r\n            default: false,\r\n            get() {\r\n                return this.notebook?.readOnly;\r\n            }\r\n        },\r\n        editors: {\r\n            default: ['html', 'code', 'markdown']\r\n        }\r\n    },\r\n    focusedIndex: -1,\r\n    get focusedItem() { return this.notebook?.cells?.[this.focusedIndex] || undefined },\r\n    set src(n) {\r\n        if (!n.startsWith('http'))\r\n            n = path + '/' + n;\r\n        ODA.loadJSON(n).then(res => {\r\n            this.notebook = res;\r\n        })\r\n    },\r\n    notebook: {}\r\n})\r\nODA({\r\n    is: 'oda-jupyter-divider',\r\n    template: `\r\n        <style>\r\n            :host{\r\n                @apply --vertical;\r\n                height: 16px;\r\n                justify-content: center;\r\n            }\r\n            :host>div{\r\n                transition: opacity ease-out .5s;\r\n            }\r\n            :host(:hover)>div{\r\n                opacity: 1;\r\n            }\r\n            oda-button{\r\n                font-size: x-small;\r\n                margin: 0px 8px;\r\n                @apply --content;\r\n                @apply --border;\r\n                padding: 0px 4px 0px 0px;\r\n                border-radius: 4px;\r\n            }\r\n            div{\r\n                opacity: 0;    \r\n                height: 2px;\r\n                align-items: center;\r\n                justify-content: center;\r\n            }\r\n        </style>\r\n        <div class=\"horizontal header\">\r\n            <oda-button :icon-size icon=\"icons:add\" ~for=\"editors\" @tap.stop=\"addCell(item)\">{{item}}</oda-button>\r\n        </div>\r\n    `,\r\n    index: -1,\r\n    addCell(cell_type) {\r\n        this.focusedIndex = -1;\r\n        this.notebook ||= {};\r\n        this.notebook.cells ||= [];\r\n        this.notebook.cells.splice(1 + (+this.index), 0, { cell_type, source: cell_type + '...' });\r\n        this.async(() => {\r\n            this.focusedIndex = 1 + (+this.index);\r\n        })\r\n    }\r\n})\r\n\r\nODA({\r\n    is: 'oda-jupyter-cell', imports: '@oda/splitter2',\r\n    template: `\r\n        <style>\r\n            :host {\r\n                position: relative;\r\n                @apply --no-flex;\r\n                padding: 1px;\r\n                height: {{editMode ? '80vh' : 'unset'}};\r\n            }\r\n            .main {\r\n                min-height: 22px;\r\n            }\r\n            .editor{\r\n                padding: 4px;\r\n                height: {{editMode ? '80vh' : ((cell?.enableResize || control?.enableResize) && cell?.cell_h) ? cell.cell_h : '100%'}}\r\n            }\r\n            oda-splitter2 {\r\n                opacity: 0;\r\n            }\r\n            oda-splitter2:hover {\r\n                opacity: .7;\r\n            }\r\n        </style>\r\n        <div class=\"vertical flex main\">\r\n            <div class=\"editor\" ~is=\"cellType\" ~class=\"{shadow: !readOnly && focused}\" :edit-mode=\"!readOnly && focused && editMode\" ::source=\"cell.source\" ::args=\"cell.args\" ::enable-resize=\"cell.enableResize\" ::fount=\"cell.fount\"></div>\r\n            <oda-splitter2 ~if=\"control?.enableResize && !editMode\" direction=\"horizontal\" :size=\"3\" color=\"gray\" style=\"margin-top: -3px; x-index: 9\" resize></oda-splitter2>\r\n        </div>\r\n        <oda-jupyter-toolbar ~if=\"!readOnly && focused\"></oda-jupyter-toolbar>\r\n    `,\r\n    set cell(n) {\r\n        if (n) {\r\n            this.src = n.cell_type;\r\n        }\r\n    },\r\n    set src(n) {\r\n        if (n) {\r\n            ODA.import('@oda/' + n).then(res => {\r\n                this.cellType = 'oda-' + n;\r\n            })\r\n        }\r\n    },\r\n    get control() {\r\n        return this.$(this.cellType);\r\n    },\r\n    focused: false,\r\n    editMode: false,\r\n    cellType: 'div',\r\n    observers: [\r\n        function _focused(focused) {\r\n            if (!focused) this.editMode = false; \r\n        }\r\n    ],\r\n    listeners: {\r\n        endSplitterMove(e) {\r\n            if (!this.readOnly) {\r\n                if (e.detail.value.direction === 'horizontal') {\r\n                    this.cell.cell_h = e.detail.value.h;\r\n                    this.cell.cell_h = this.cell.cell_h < 20 ? 20 : this.cell.cell_h;\r\n                    this.async(() => this.$('.main').style.height = 'unset', 100);\r\n                }\r\n            }\r\n        }\r\n    },\r\n})\r\n\r\nODA({\r\n    is: 'oda-jupyter-toolbar',\r\n    template: `\r\n        <style>\r\n            :host{\r\n                position: absolute;\r\n                top: -{{iconSize}}px;\r\n                right: 8px;\r\n                @apply --horizontal;\r\n                @apply --no-flex;\r\n                padding: 1px;\r\n                @apply --content;\r\n                @apply --shadow;\r\n                border-radius: 2px;\r\n            }\r\n        </style>\r\n        <oda-button :disabled=\"focusedIndex === 0\" :icon-size icon=\"icons:arrow-back:90\" @tap=\"moveCell(-1)\"></oda-button>\r\n        <oda-button :disabled=\"focusedIndex >= notebook?.cells?.length - 1\" :icon-size icon=\"icons:arrow-back:270\" @tap=\"moveCell(1)\"></oda-button>\r\n        <span style=\"width: 8px\"></span>\r\n        <oda-button :icon-size icon=\"icons:settings\" ~show=\"enableSettings\" @tap=\"showSettings\"></oda-button>\r\n        <oda-button :icon-size icon=\"icons:delete\" @tap=\"deleteCell\"></oda-button>\r\n        <span style=\"width: 8px\"></span>\r\n        <oda-button allow-toggle ::toggled=\"editMode\" :icon-size :icon=\"editMode?'icons:close':'editor:mode-edit'\" @tap=\"editMode = !editMode\"></oda-button>\r\n    `,\r\n    get enableSettings() {\r\n        return Object.keys(this.control?.props || {}).length > 0;\r\n    },\r\n    get enableSettings2() {\r\n        return Object.keys(this.control?.usedControl?.props || {}).length > 0;\r\n    },\r\n    cell: null,\r\n    async showSettings(e) {\r\n        if (!this.enableSettings) return;\r\n        let control = this.control;\r\n        let io = {};\r\n        let props = {};\r\n        Object.keys(control.props).forEach(key => {\r\n            io[key] = control[key];\r\n            props[key] = {\r\n                default: control[key],\r\n                type: typeof control[key],\r\n                list: control.props[key].list || [],\r\n                category: 'cell - ' + control.localName\r\n            }\r\n        })\r\n        let control2;\r\n        if (this.enableSettings2) {\r\n            control2 = control.usedControl;\r\n            Object.keys(control2.props).forEach(key => {\r\n                io[key] = control2[key];\r\n                props[key] = {\r\n                    default: control2[key],\r\n                    type: typeof control2[key],\r\n                    list: control2.props?.[key]?.list || [],\r\n                    category: 'editor - ' + control2.localName\r\n                }\r\n            })\r\n        }\r\n        io.props = props;\r\n        io = new Proxy(io, {\r\n            set: function(target, key, value) {\r\n                if (target.props[key].category === 'cell - ' + control.localName) {\r\n                    control[key] = value;\r\n                    control.controlSetArgs?.({ key, value, setArgs: true });\r\n                    if (key === 'type') {\r\n                        const dd = document.body.getElementsByTagName('oda-dropdown')\r\n                        this.ddMenuIndex = -1;\r\n                        if (dd.length) {\r\n                            for (let i = 0; i < dd.length; i++) {\r\n                                const elm = dd[i];\r\n                                elm.fire('cancel');\r\n                            }\r\n                        }\r\n                    }\r\n                } else if (target.props[key].category === 'editor - ' + control2.localName) {\r\n                    control2[key] = value;\r\n                    control.controlSetArgs?.({ key, value, setArgs: false });\r\n                }\r\n                target[key] = value;\r\n                return true;\r\n            }\r\n        })\r\n        await ODA.showDropdown(\r\n            'oda-property-grid',\r\n            { inspectedObject: io, style: 'min-width: 360px', showHeader: false },\r\n            { parent: e.target, align: 'left', intersect: true, title: control.localName }\r\n        )\r\n    },\r\n    moveCell(v) {\r\n        this.editMode = false;\r\n        let idx = this.focusedIndex;\r\n        const cells = this.notebook.cells.splice(idx, 1);\r\n        idx = idx + v;\r\n        idx = idx < 0 ? 0 : idx > this.notebook.cells.length ? this.notebook.cells.length : idx;\r\n        this.notebook.cells.splice(idx, 0, cells[0])\r\n        this.async(() => {\r\n            this.focusedIndex = idx;\r\n        })\r\n    },\r\n    deleteCell() {\r\n        this.editMode = false;\r\n        this.notebook.cells.splice(this.focusedIndex, 1);\r\n    }\r\n})\r\n",
			"args": "{\"mode\":\"javascript\"}",
			"cell_h": 236
		},
		{
			"cell_type": "code",
			"source": "<meta charset=\"utf-8\">\r\n\r\n<oda-jupyter-app></oda-jupyter-app>\r\n\r\n<script type=\"module\">\r\n    import '../../oda.js';\r\n    ODA({ is: 'oda-jupyter-app', imports: '@oda/button, ./jupyter.js',\r\n        template: `\r\n            <style>\r\n                oda-button {\r\n                    font-size: 12px;\r\n                    margin: 2px;\r\n                }\r\n            </style>\r\n\r\n            <div style=\"flex-wrap: wrap; display: flex; flex-direction: row-reverse; border: 1px solid gray; position: sticky; top: 0; background: white; z-index: 99; background: lightgray; margin: 1px\">\r\n                <oda-button @tap=\"saveFile\">save</oda-button>\r\n                <oda-button for=\"load\" @tap=\"this.$('#load').click()\">load</oda-button>\r\n                <input id=\"load\" type=\"file\" style=\"display: none\" @change=\"loadFile($event)\"/>\r\n                <oda-button @tap=\"jupyter.readOnly = !jupyter.readOnly\" allow-toggle ::toggled=\"jupyter.readOnly\">readOnly</oda-button>\r\n                <oda-button @tap=\"jupyter.notebook.cells = []\">clear</oda-button>\r\n                <oda-button @tap=\"document.location.reload()\">reload</oda-button>\r\n            </div>\r\n            <oda-jupyter id=\"jupyter\" :src show-border></oda-jupyter>\r\n        `,\r\n        src: './jupyter-2.json',\r\n        get jupyter() { return this.$('#jupyter') },\r\n        loadFile(e) {\r\n            const file = e.target.files[0];\r\n            const reader = new FileReader();\r\n            reader.onload = async e => this.jupyter.notebook = JSON.parse(e.target.result);\r\n            reader.readAsText(file, 'UTF-8');\r\n            if (this.jupyter.notebook) {\r\n                this.readOnly = this.jupyter.notebook.readOnly;\r\n            }\r\n        },\r\n        async saveFile(e) {\r\n            let str = JSON.stringify(this.jupyter.notebook, null, '\\t');\r\n            if (!str) return;\r\n            const blob = new Blob([str], { type: \"text/plain\" });\r\n            const a = document.createElement(\"a\");\r\n            a.href = URL.createObjectURL(blob);\r\n            a.download = (this.jupyter.notebook.label || 'oda-jupyter') + '.json';\r\n            a.click();\r\n        }\r\n    })\r\n</script>",
			"args": "",
			"cell_h": 294,
			"fount": ""
		}
	]
}
